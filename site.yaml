---

- name: Install pip
  hosts: all
  become: true
  
  tasks:
    - name: Update Ubuntu system
      apt:
        update_cache: yes
        
    - name: Install python-pip
      apt:
        name: python3-pip
        state: present
        
    - name: Install curl package
      apt:
        name: curl
        state: present
        

- name: Deploy Flask application
  hosts: dev
  become: true

  tasks:
  
    - name: Install Requirmnets
      pip:
        name:
          - net-tools
          
            
    - name: Install Python and Flask
      ansible.builtin.pip:
        name:
          - flask

    - name: Copy Flask application script
      ansible.builtin.copy:
        src: application2.py
        dest: /home/application2.py
        mode: '0755'

    - name: Copy my-app-service
      ansible.builtin.copy:
        src: my_flask_app.service
        dest: /etc/systemd/system/my_flask_app.service
        mode: '0777'
    - name: daemon Flask application service
      ansible.builtin.shell:
        cmd: "systemctl daemon-reload "
    - name: Start Flask application service
      ansible.builtin.shell:
        cmd: "systemctl restart my_flask_app "
        
    - name: Install SNMP daemon on Service Nodes
      become: true
      apt:
        name: snmpd
        state: present

    - name: Install snmp-mibs-downloader
      become: true
      apt:
        name: snmp-mibs-downloader
        state: present

    - name: copy snmpd.conf file
      copy:
        src="./snmpd.conf"
        dest="/etc/snmp/snmpd.conf"

    - name: restarting snmpd
      service:
        name: snmpd
        state: restarted
        enabled: yes

- name: Install InfluxDB, Telegraf, and InfluxDB client on Ubuntu
  hosts: bastion
  become: true
  tasks:
    - name: Install InfluxDB, Telegraf, and InfluxDB client
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - influxdb
        - telegraf
        - influxdb-client
        



        
      

- hosts: haproxy
  become: yes
  vars:
    Mymessage: "Nginix "
    algorithm:  roundrobin
    loadbalancer_name: nginx
    loadbal_src_path: nginx.cfg.j2
    loadbal_dest_path: /etc/nginx/nginx.conf
    haproxy_host_ipv4_address: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    
    
  tasks:
    
    - name: Install Nginx
      become: yes 
      apt: 
        name: "{{loadbalancer_name}}" 
        state:  present
        
    - name: Install libnginx-mod-stream
      apt:
        name: libnginx-mod-stream
        state: present
        
    
    - name: Copy Nginx Config File 
      template:
        src:  "{{loadbal_src_path}}"
        dest: "{{loadbal_dest_path}}"

- hosts: haproxy
  become: yes
  vars:
    Mymessage: "Nginix2"
    algorithm:  roundrobin
    loadbalancer_name: nginx
    loadbal_src_path: my_load_balancer.cfg.j2
    loadbal_dest_path: /etc/nginx/sites-available/my_load_balancer
    loadbal_enabled_link: /etc/nginx/sites-enabled/my_load_balancer
    haproxy_host_ipv4_address: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"      
  
  
  tasks:
  
    - name: Copy Nginx Config File 
      template:
        src:  "{{loadbal_src_path}}"
        dest: "{{loadbal_dest_path}}"
    
        
    - name: Create Symbolic Link for Nginx Config
      file:
        src: "{{ loadbal_dest_path }}"
        dest: "{{ loadbal_enabled_link }}"
        state: link
    
        
    - name: Task9(Restart Nginx)
      service:  
        name: "{{loadbalancer_name}}"
        state: restarted
        
    - name: Ping Nginx IP
      ping:
        data: "{{ ansible_default_ipv4.address }}"
        
    - name: Send HTTP request
      command: "curl -s http://{{ansible_default_ipv4.address}}:5000"
      register: curl_output

    - name: Display HTTP response
      debug:
        var: curl_output.stdout

    - name: Send HTTP request
      command: "curl -s http://{{ansible_default_ipv4.address}}:5000"
      register: curl_output

    - name: Display HTTP response
      debug:
        var: curl_output.stdout
        
    - name: Send HTTP request
      command: "curl -s http://{{ansible_default_ipv4.address}}:5000"
      register: curl_output

    - name: Display HTTP response
      debug:
        var: curl_output.stdout
    


    

    

